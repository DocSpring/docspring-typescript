/**
 * DocSpring API
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class TemplatePreview {
    'addDataRequestSubmissionIdFooters': boolean;
    'allowAdditionalProperties': boolean;
    'description': string | null;
    'documentFilename': string | null;
    'documentMd5': string | null;
    'documentParseError': boolean;
    'documentProcessed': boolean;
    'documentState': TemplatePreviewDocumentStateEnum;
    'documentUrl': string | null;
    'editableSubmissions': boolean;
    'embedDomains': string | null;
    'encryptPdfsPassword': string | null;
    'encryptPdfs': boolean;
    'expirationInterval': string;
    'expireAfter': number;
    'expireSubmissions': boolean;
    'externalPredefinedFieldsTemplateId': string | null;
    'externalPredefinedFieldsTemplateName': string | null;
    'firstTemplate': boolean;
    'id': string | null;
    'locked': boolean;
    'mergeAuditTrailPdf': boolean;
    'name': string | null;
    'pageCount': number;
    'pageDimensions': Array<Array<number>> | null;
    'parentFolderId': string | null;
    'path': string | null;
    'permanentDocumentUrl': string | null;
    'publicSubmissions': boolean;
    'publicWebForm': boolean;
    'redirectUrl': string | null;
    'slackWebhookUrl': string | null;
    'templateType': TemplatePreviewTemplateTypeEnum;
    'updatedAt': string | null;
    'webhookUrl': string | null;
    'demo': boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "addDataRequestSubmissionIdFooters",
            "baseName": "add_data_request_submission_id_footers",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "allowAdditionalProperties",
            "baseName": "allow_additional_properties",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "documentFilename",
            "baseName": "document_filename",
            "type": "string",
            "format": ""
        },
        {
            "name": "documentMd5",
            "baseName": "document_md5",
            "type": "string",
            "format": ""
        },
        {
            "name": "documentParseError",
            "baseName": "document_parse_error",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "documentProcessed",
            "baseName": "document_processed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "documentState",
            "baseName": "document_state",
            "type": "TemplatePreviewDocumentStateEnum",
            "format": ""
        },
        {
            "name": "documentUrl",
            "baseName": "document_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "editableSubmissions",
            "baseName": "editable_submissions",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "embedDomains",
            "baseName": "embed_domains",
            "type": "string",
            "format": ""
        },
        {
            "name": "encryptPdfsPassword",
            "baseName": "encrypt_pdfs_password",
            "type": "string",
            "format": ""
        },
        {
            "name": "encryptPdfs",
            "baseName": "encrypt_pdfs",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "expirationInterval",
            "baseName": "expiration_interval",
            "type": "string",
            "format": ""
        },
        {
            "name": "expireAfter",
            "baseName": "expire_after",
            "type": "number",
            "format": ""
        },
        {
            "name": "expireSubmissions",
            "baseName": "expire_submissions",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "externalPredefinedFieldsTemplateId",
            "baseName": "external_predefined_fields_template_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "externalPredefinedFieldsTemplateName",
            "baseName": "external_predefined_fields_template_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "firstTemplate",
            "baseName": "first_template",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "locked",
            "baseName": "locked",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "mergeAuditTrailPdf",
            "baseName": "merge_audit_trail_pdf",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "pageCount",
            "baseName": "page_count",
            "type": "number",
            "format": ""
        },
        {
            "name": "pageDimensions",
            "baseName": "page_dimensions",
            "type": "Array<Array<number>>",
            "format": ""
        },
        {
            "name": "parentFolderId",
            "baseName": "parent_folder_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string",
            "format": ""
        },
        {
            "name": "permanentDocumentUrl",
            "baseName": "permanent_document_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "publicSubmissions",
            "baseName": "public_submissions",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "publicWebForm",
            "baseName": "public_web_form",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "redirectUrl",
            "baseName": "redirect_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "slackWebhookUrl",
            "baseName": "slack_webhook_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "templateType",
            "baseName": "template_type",
            "type": "TemplatePreviewTemplateTypeEnum",
            "format": ""
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "string",
            "format": ""
        },
        {
            "name": "webhookUrl",
            "baseName": "webhook_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "demo",
            "baseName": "demo",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return TemplatePreview.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum TemplatePreviewDocumentStateEnum {
    Pending = 'pending',
    Processed = 'processed',
    PasswordRequired = 'password_required',
    MalformedPdf = 'malformed_pdf',
    UnknownError = 'unknown_error'
}
export enum TemplatePreviewTemplateTypeEnum {
    Pdf = 'pdf',
    Html = 'html'
}

