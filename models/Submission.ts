/**
 * DocSpring API
 * Use DocSpring\'s API to programmatically fill out PDF forms, convert HTML to PDFs, merge PDFs, or request legally binding e-signatures.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SubmissionAction } from '../models/SubmissionAction';
import { SubmissionDataRequest } from '../models/SubmissionDataRequest';
import { HttpFile } from '../http/http';

export class Submission {
    'batch_id': string | null;
    'data_requests': Array<SubmissionDataRequest>;
    'editable': boolean | null;
    'expired': boolean;
    'expires_at': string | null;
    'id': string | null;
    'json_schema_errors': Array<string> | null;
    'metadata': any;
    'password': string | null;
    'processed_at': string | null;
    'state': SubmissionStateEnum;
    'template_id': string | null;
    'template_type': SubmissionTemplateTypeEnum;
    'template_version': string | null;
    'test': boolean;
    'truncated_text': any | null;
    'pdf_hash': string | null;
    'download_url': string | null;
    'permanent_download_url': string | null;
    'preview_download_url': string | null;
    'preview_generated_at': string | null;
    'audit_trail_download_url': string | null;
    'actions': Array<SubmissionAction>;
    'source': SubmissionSourceEnum;
    'referrer': string | null;
    'data': any | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "batch_id",
            "baseName": "batch_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "data_requests",
            "baseName": "data_requests",
            "type": "Array<SubmissionDataRequest>",
            "format": ""
        },
        {
            "name": "editable",
            "baseName": "editable",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "expired",
            "baseName": "expired",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "expires_at",
            "baseName": "expires_at",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "json_schema_errors",
            "baseName": "json_schema_errors",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "any",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string",
            "format": ""
        },
        {
            "name": "processed_at",
            "baseName": "processed_at",
            "type": "string",
            "format": ""
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "SubmissionStateEnum",
            "format": ""
        },
        {
            "name": "template_id",
            "baseName": "template_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "template_type",
            "baseName": "template_type",
            "type": "SubmissionTemplateTypeEnum",
            "format": ""
        },
        {
            "name": "template_version",
            "baseName": "template_version",
            "type": "string",
            "format": ""
        },
        {
            "name": "test",
            "baseName": "test",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "truncated_text",
            "baseName": "truncated_text",
            "type": "any",
            "format": ""
        },
        {
            "name": "pdf_hash",
            "baseName": "pdf_hash",
            "type": "string",
            "format": ""
        },
        {
            "name": "download_url",
            "baseName": "download_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "permanent_download_url",
            "baseName": "permanent_download_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "preview_download_url",
            "baseName": "preview_download_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "preview_generated_at",
            "baseName": "preview_generated_at",
            "type": "string",
            "format": ""
        },
        {
            "name": "audit_trail_download_url",
            "baseName": "audit_trail_download_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "actions",
            "baseName": "actions",
            "type": "Array<SubmissionAction>",
            "format": ""
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "SubmissionSourceEnum",
            "format": ""
        },
        {
            "name": "referrer",
            "baseName": "referrer",
            "type": "string",
            "format": ""
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "any",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Submission.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum SubmissionStateEnum {
    Pending = 'pending',
    Processed = 'processed',
    InvalidData = 'invalid_data',
    Error = 'error',
    ImageDownloadFailed = 'image_download_failed',
    ImageProcessingFailed = 'image_processing_failed',
    WaitingForDataRequests = 'waiting_for_data_requests',
    SyntaxError = 'syntax_error',
    AccountSuspended = 'account_suspended',
    LicenseRevoked = 'license_revoked',
    Accidental = 'accidental'
}
export enum SubmissionTemplateTypeEnum {
    Pdf = 'pdf',
    Html = 'html'
}
export enum SubmissionSourceEnum {
    Api = 'api',
    Web = 'web',
    Reprocess = 'reprocess',
    Webhook = 'webhook'
}

