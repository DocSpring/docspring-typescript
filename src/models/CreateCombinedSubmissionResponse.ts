/* tslint:disable */
/* eslint-disable */
/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CombinedSubmission } from './CombinedSubmission';
import {
    CombinedSubmissionFromJSON,
    CombinedSubmissionFromJSONTyped,
    CombinedSubmissionToJSON,
} from './CombinedSubmission';

/**
 * 
 * @export
 * @interface CreateCombinedSubmissionResponse
 */
export interface CreateCombinedSubmissionResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateCombinedSubmissionResponse
     */
    status: CreateCombinedSubmissionResponseStatusEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCombinedSubmissionResponse
     */
    errors?: Array<string>;
    /**
     * 
     * @type {CombinedSubmission}
     * @memberof CreateCombinedSubmissionResponse
     */
    combinedSubmission: CombinedSubmission;
}


/**
 * @export
 */
export const CreateCombinedSubmissionResponseStatusEnum = {
    Success: 'success',
    Error: 'error'
} as const;
export type CreateCombinedSubmissionResponseStatusEnum = typeof CreateCombinedSubmissionResponseStatusEnum[keyof typeof CreateCombinedSubmissionResponseStatusEnum];


/**
 * Check if a given object implements the CreateCombinedSubmissionResponse interface.
 */
export function instanceOfCreateCombinedSubmissionResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "combinedSubmission" in value;

    return isInstance;
}

export function CreateCombinedSubmissionResponseFromJSON(json: any): CreateCombinedSubmissionResponse {
    return CreateCombinedSubmissionResponseFromJSONTyped(json, false);
}

export function CreateCombinedSubmissionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCombinedSubmissionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': json['status'],
        'errors': !exists(json, 'errors') ? undefined : json['errors'],
        'combinedSubmission': CombinedSubmissionFromJSON(json['combined_submission']),
    };
}

export function CreateCombinedSubmissionResponseToJSON(value?: CreateCombinedSubmissionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': value.status,
        'errors': value.errors,
        'combined_submission': CombinedSubmissionToJSON(value.combinedSubmission),
    };
}

