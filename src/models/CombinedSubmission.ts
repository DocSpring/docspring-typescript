/* tslint:disable */
/* eslint-disable */
/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CombinedSubmissionAction } from './CombinedSubmissionAction';
import {
    CombinedSubmissionActionFromJSON,
    CombinedSubmissionActionFromJSONTyped,
    CombinedSubmissionActionToJSON,
} from './CombinedSubmissionAction';

/**
 * 
 * @export
 * @interface CombinedSubmission
 */
export interface CombinedSubmission {
    /**
     * 
     * @type {string}
     * @memberof CombinedSubmission
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof CombinedSubmission
     */
    expired: boolean;
    /**
     * 
     * @type {number}
     * @memberof CombinedSubmission
     */
    expiresIn?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CombinedSubmission
     */
    expiresAt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CombinedSubmission
     */
    state: CombinedSubmissionStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CombinedSubmission
     */
    errorMessage?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CombinedSubmission
     */
    metadata?: object;
    /**
     * 
     * @type {string}
     * @memberof CombinedSubmission
     */
    password?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CombinedSubmission
     */
    submissionIds: Array<string>;
    /**
     * 
     * @type {Array<object>}
     * @memberof CombinedSubmission
     */
    sourcePdfs: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof CombinedSubmission
     */
    downloadUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CombinedSubmission
     */
    pdfHash?: string | null;
    /**
     * 
     * @type {Array<CombinedSubmissionAction>}
     * @memberof CombinedSubmission
     */
    actions?: Array<CombinedSubmissionAction>;
}


/**
 * @export
 */
export const CombinedSubmissionStateEnum = {
    Pending: 'pending',
    Processed: 'processed',
    Error: 'error'
} as const;
export type CombinedSubmissionStateEnum = typeof CombinedSubmissionStateEnum[keyof typeof CombinedSubmissionStateEnum];


/**
 * Check if a given object implements the CombinedSubmission interface.
 */
export function instanceOfCombinedSubmission(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "expired" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "submissionIds" in value;
    isInstance = isInstance && "sourcePdfs" in value;

    return isInstance;
}

export function CombinedSubmissionFromJSON(json: any): CombinedSubmission {
    return CombinedSubmissionFromJSONTyped(json, false);
}

export function CombinedSubmissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CombinedSubmission {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'expired': json['expired'],
        'expiresIn': !exists(json, 'expires_in') ? undefined : json['expires_in'],
        'expiresAt': !exists(json, 'expires_at') ? undefined : json['expires_at'],
        'state': json['state'],
        'errorMessage': !exists(json, 'error_message') ? undefined : json['error_message'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'submissionIds': json['submission_ids'],
        'sourcePdfs': json['source_pdfs'],
        'downloadUrl': !exists(json, 'download_url') ? undefined : json['download_url'],
        'pdfHash': !exists(json, 'pdf_hash') ? undefined : json['pdf_hash'],
        'actions': !exists(json, 'actions') ? undefined : ((json['actions'] as Array<any>).map(CombinedSubmissionActionFromJSON)),
    };
}

export function CombinedSubmissionToJSON(value?: CombinedSubmission | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'expired': value.expired,
        'expires_in': value.expiresIn,
        'expires_at': value.expiresAt,
        'state': value.state,
        'error_message': value.errorMessage,
        'metadata': value.metadata,
        'password': value.password,
        'submission_ids': value.submissionIds,
        'source_pdfs': value.sourcePdfs,
        'download_url': value.downloadUrl,
        'pdf_hash': value.pdfHash,
        'actions': value.actions === undefined ? undefined : ((value.actions as Array<any>).map(CombinedSubmissionActionToJSON)),
    };
}

