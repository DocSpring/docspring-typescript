/* tslint:disable */
/* eslint-disable */
/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SubmissionAction } from './SubmissionAction';
import {
    SubmissionActionFromJSON,
    SubmissionActionFromJSONTyped,
    SubmissionActionToJSON,
} from './SubmissionAction';
import type { SubmissionDataRequest } from './SubmissionDataRequest';
import {
    SubmissionDataRequestFromJSON,
    SubmissionDataRequestFromJSONTyped,
    SubmissionDataRequestToJSON,
} from './SubmissionDataRequest';

/**
 * 
 * @export
 * @interface Submission
 */
export interface Submission {
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    templateId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Submission
     */
    test: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Submission
     */
    editable?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof Submission
     */
    expired: boolean;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    expiresAt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    processedAt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    state: SubmissionStateEnum;
    /**
     * 
     * @type {object}
     * @memberof Submission
     */
    data?: object | null;
    /**
     * 
     * @type {object}
     * @memberof Submission
     */
    metadata?: object;
    /**
     * 
     * @type {object}
     * @memberof Submission
     */
    truncatedText?: object;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    pdfHash?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    downloadUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    permanentDownloadUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    batchId?: string | null;
    /**
     * 
     * @type {Array<SubmissionDataRequest>}
     * @memberof Submission
     */
    dataRequests?: Array<SubmissionDataRequest>;
    /**
     * 
     * @type {Array<SubmissionAction>}
     * @memberof Submission
     */
    actions?: Array<SubmissionAction>;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    source?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    referrer?: string | null;
}


/**
 * @export
 */
export const SubmissionStateEnum = {
    Pending: 'pending',
    Processed: 'processed',
    InvalidData: 'invalid_data',
    Error: 'error',
    ImageDownloadFailed: 'image_download_failed',
    ImageProcessingFailed: 'image_processing_failed',
    WaitingForDataRequests: 'waiting_for_data_requests',
    SyntaxError: 'syntax_error',
    AccountSuspended: 'account_suspended',
    LicenseRevoked: 'license_revoked',
    Accidental: 'accidental'
} as const;
export type SubmissionStateEnum = typeof SubmissionStateEnum[keyof typeof SubmissionStateEnum];


/**
 * Check if a given object implements the Submission interface.
 */
export function instanceOfSubmission(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "test" in value;
    isInstance = isInstance && "expired" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function SubmissionFromJSON(json: any): Submission {
    return SubmissionFromJSONTyped(json, false);
}

export function SubmissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Submission {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'templateId': !exists(json, 'template_id') ? undefined : json['template_id'],
        'test': json['test'],
        'editable': !exists(json, 'editable') ? undefined : json['editable'],
        'expired': json['expired'],
        'expiresAt': !exists(json, 'expires_at') ? undefined : json['expires_at'],
        'processedAt': !exists(json, 'processed_at') ? undefined : json['processed_at'],
        'state': json['state'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'truncatedText': !exists(json, 'truncated_text') ? undefined : json['truncated_text'],
        'pdfHash': !exists(json, 'pdf_hash') ? undefined : json['pdf_hash'],
        'downloadUrl': !exists(json, 'download_url') ? undefined : json['download_url'],
        'permanentDownloadUrl': !exists(json, 'permanent_download_url') ? undefined : json['permanent_download_url'],
        'batchId': !exists(json, 'batch_id') ? undefined : json['batch_id'],
        'dataRequests': !exists(json, 'data_requests') ? undefined : ((json['data_requests'] as Array<any>).map(SubmissionDataRequestFromJSON)),
        'actions': !exists(json, 'actions') ? undefined : ((json['actions'] as Array<any>).map(SubmissionActionFromJSON)),
        'source': !exists(json, 'source') ? undefined : json['source'],
        'referrer': !exists(json, 'referrer') ? undefined : json['referrer'],
    };
}

export function SubmissionToJSON(value?: Submission | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'template_id': value.templateId,
        'test': value.test,
        'editable': value.editable,
        'expired': value.expired,
        'expires_at': value.expiresAt,
        'processed_at': value.processedAt,
        'state': value.state,
        'data': value.data,
        'metadata': value.metadata,
        'truncated_text': value.truncatedText,
        'pdf_hash': value.pdfHash,
        'download_url': value.downloadUrl,
        'permanent_download_url': value.permanentDownloadUrl,
        'batch_id': value.batchId,
        'data_requests': value.dataRequests === undefined ? undefined : ((value.dataRequests as Array<any>).map(SubmissionDataRequestToJSON)),
        'actions': value.actions === undefined ? undefined : ((value.actions as Array<any>).map(SubmissionActionToJSON)),
        'source': value.source,
        'referrer': value.referrer,
    };
}

