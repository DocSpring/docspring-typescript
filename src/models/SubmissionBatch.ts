/* tslint:disable */
/* eslint-disable */
/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Submission } from './Submission';
import {
    SubmissionFromJSON,
    SubmissionFromJSONTyped,
    SubmissionToJSON,
} from './Submission';

/**
 * 
 * @export
 * @interface SubmissionBatch
 */
export interface SubmissionBatch {
    /**
     * 
     * @type {string}
     * @memberof SubmissionBatch
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof SubmissionBatch
     */
    totalCount: number;
    /**
     * 
     * @type {number}
     * @memberof SubmissionBatch
     */
    pendingCount: number;
    /**
     * 
     * @type {number}
     * @memberof SubmissionBatch
     */
    errorCount: number;
    /**
     * 
     * @type {number}
     * @memberof SubmissionBatch
     */
    completionPercentage: number;
    /**
     * 
     * @type {string}
     * @memberof SubmissionBatch
     */
    state: SubmissionBatchStateEnum;
    /**
     * 
     * @type {string}
     * @memberof SubmissionBatch
     */
    processedAt: string | null;
    /**
     * 
     * @type {object}
     * @memberof SubmissionBatch
     */
    metadata: object;
    /**
     * 
     * @type {Array<Submission>}
     * @memberof SubmissionBatch
     */
    submissions?: Array<Submission>;
}


/**
 * @export
 */
export const SubmissionBatchStateEnum = {
    Pending: 'pending',
    Processed: 'processed',
    Error: 'error'
} as const;
export type SubmissionBatchStateEnum = typeof SubmissionBatchStateEnum[keyof typeof SubmissionBatchStateEnum];


/**
 * Check if a given object implements the SubmissionBatch interface.
 */
export function instanceOfSubmissionBatch(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "totalCount" in value;
    isInstance = isInstance && "pendingCount" in value;
    isInstance = isInstance && "errorCount" in value;
    isInstance = isInstance && "completionPercentage" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "processedAt" in value;
    isInstance = isInstance && "metadata" in value;

    return isInstance;
}

export function SubmissionBatchFromJSON(json: any): SubmissionBatch {
    return SubmissionBatchFromJSONTyped(json, false);
}

export function SubmissionBatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubmissionBatch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'totalCount': json['total_count'],
        'pendingCount': json['pending_count'],
        'errorCount': json['error_count'],
        'completionPercentage': json['completion_percentage'],
        'state': json['state'],
        'processedAt': json['processed_at'],
        'metadata': json['metadata'],
        'submissions': !exists(json, 'submissions') ? undefined : ((json['submissions'] as Array<any>).map(SubmissionFromJSON)),
    };
}

export function SubmissionBatchToJSON(value?: SubmissionBatch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'total_count': value.totalCount,
        'pending_count': value.pendingCount,
        'error_count': value.errorCount,
        'completion_percentage': value.completionPercentage,
        'state': value.state,
        'processed_at': value.processedAt,
        'metadata': value.metadata,
        'submissions': value.submissions === undefined ? undefined : ((value.submissions as Array<any>).map(SubmissionToJSON)),
    };
}

