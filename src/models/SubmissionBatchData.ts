/* tslint:disable */
/* eslint-disable */
/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SubmissionDataBatchRequest } from './SubmissionDataBatchRequest';
import {
    SubmissionDataBatchRequestFromJSON,
    SubmissionDataBatchRequestFromJSONTyped,
    SubmissionDataBatchRequestToJSON,
} from './SubmissionDataBatchRequest';

/**
 * 
 * @export
 * @interface SubmissionBatchData
 */
export interface SubmissionBatchData {
    /**
     * 
     * @type {object}
     * @memberof SubmissionBatchData
     */
    metadata?: object;
    /**
     * 
     * @type {Array<SubmissionDataBatchRequest>}
     * @memberof SubmissionBatchData
     */
    submissions: Array<SubmissionDataBatchRequest>;
    /**
     * 
     * @type {string}
     * @memberof SubmissionBatchData
     */
    templateId?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SubmissionBatchData
     */
    test?: boolean;
}

/**
 * Check if a given object implements the SubmissionBatchData interface.
 */
export function instanceOfSubmissionBatchData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "submissions" in value;

    return isInstance;
}

export function SubmissionBatchDataFromJSON(json: any): SubmissionBatchData {
    return SubmissionBatchDataFromJSONTyped(json, false);
}

export function SubmissionBatchDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubmissionBatchData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'submissions': ((json['submissions'] as Array<any>).map(SubmissionDataBatchRequestFromJSON)),
        'templateId': !exists(json, 'template_id') ? undefined : json['template_id'],
        'test': !exists(json, 'test') ? undefined : json['test'],
    };
}

export function SubmissionBatchDataToJSON(value?: SubmissionBatchData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': value.metadata,
        'submissions': ((value.submissions as Array<any>).map(SubmissionDataBatchRequestToJSON)),
        'template_id': value.templateId,
        'test': value.test,
    };
}

