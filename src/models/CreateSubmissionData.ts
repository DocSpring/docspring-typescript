/* tslint:disable */
/* eslint-disable */
/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateSubmissionDataRequestData } from './CreateSubmissionDataRequestData';
import {
    CreateSubmissionDataRequestDataFromJSON,
    CreateSubmissionDataRequestDataFromJSONTyped,
    CreateSubmissionDataRequestDataToJSON,
} from './CreateSubmissionDataRequestData';

/**
 * 
 * @export
 * @interface CreateSubmissionData
 */
export interface CreateSubmissionData {
    /**
     * 
     * @type {string}
     * @memberof CreateSubmissionData
     */
    css?: string;
    /**
     * 
     * @type {object}
     * @memberof CreateSubmissionData
     */
    data: object;
    /**
     * 
     * @type {Array<CreateSubmissionDataRequestData>}
     * @memberof CreateSubmissionData
     */
    dataRequests?: Array<CreateSubmissionDataRequestData>;
    /**
     * 
     * @type {number}
     * @memberof CreateSubmissionData
     */
    expiresIn?: number;
    /**
     * 
     * @type {object}
     * @memberof CreateSubmissionData
     */
    fieldOverrides?: object;
    /**
     * 
     * @type {string}
     * @memberof CreateSubmissionData
     */
    html?: string;
    /**
     * 
     * @type {object}
     * @memberof CreateSubmissionData
     */
    metadata?: object;
    /**
     * 
     * @type {string}
     * @memberof CreateSubmissionData
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSubmissionData
     */
    test?: boolean;
}

/**
 * Check if a given object implements the CreateSubmissionData interface.
 */
export function instanceOfCreateSubmissionData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "data" in value;

    return isInstance;
}

export function CreateSubmissionDataFromJSON(json: any): CreateSubmissionData {
    return CreateSubmissionDataFromJSONTyped(json, false);
}

export function CreateSubmissionDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSubmissionData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'css': !exists(json, 'css') ? undefined : json['css'],
        'data': json['data'],
        'dataRequests': !exists(json, 'data_requests') ? undefined : ((json['data_requests'] as Array<any>).map(CreateSubmissionDataRequestDataFromJSON)),
        'expiresIn': !exists(json, 'expires_in') ? undefined : json['expires_in'],
        'fieldOverrides': !exists(json, 'field_overrides') ? undefined : json['field_overrides'],
        'html': !exists(json, 'html') ? undefined : json['html'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'test': !exists(json, 'test') ? undefined : json['test'],
    };
}

export function CreateSubmissionDataToJSON(value?: CreateSubmissionData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'css': value.css,
        'data': value.data,
        'data_requests': value.dataRequests === undefined ? undefined : ((value.dataRequests as Array<any>).map(CreateSubmissionDataRequestDataToJSON)),
        'expires_in': value.expiresIn,
        'field_overrides': value.fieldOverrides,
        'html': value.html,
        'metadata': value.metadata,
        'password': value.password,
        'test': value.test,
    };
}

