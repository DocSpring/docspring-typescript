/* tslint:disable */
/* eslint-disable */
/**
 * API v1
 * DocSpring is a service that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TemplateDocument } from './TemplateDocument';
import {
    TemplateDocumentFromJSON,
    TemplateDocumentFromJSONTyped,
    TemplateDocumentToJSON,
} from './TemplateDocument';

/**
 * 
 * @export
 * @interface UploadTemplateData
 */
export interface UploadTemplateData {
    /**
     * 
     * @type {boolean}
     * @memberof UploadTemplateData
     */
    allowAdditionalProperties?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    description?: string | null;
    /**
     * 
     * @type {TemplateDocument}
     * @memberof UploadTemplateData
     */
    document?: TemplateDocument;
    /**
     * 
     * @type {boolean}
     * @memberof UploadTemplateData
     */
    editableSubmissions?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    expirationInterval?: UploadTemplateDataExpirationIntervalEnum;
    /**
     * 
     * @type {number}
     * @memberof UploadTemplateData
     */
    expireAfter?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UploadTemplateData
     */
    expireSubmissions?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    footerHtml?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    headerHtml?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    html?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    name: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UploadTemplateData
     */
    publicSubmissions?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UploadTemplateData
     */
    publicWebForm?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    redirectUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    scss?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    slackWebhookUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    templateType?: UploadTemplateDataTemplateTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UploadTemplateData
     */
    webhookUrl?: string | null;
}


/**
 * @export
 */
export const UploadTemplateDataExpirationIntervalEnum = {
    Minutes: 'minutes',
    Hours: 'hours',
    Days: 'days'
} as const;
export type UploadTemplateDataExpirationIntervalEnum = typeof UploadTemplateDataExpirationIntervalEnum[keyof typeof UploadTemplateDataExpirationIntervalEnum];

/**
 * @export
 */
export const UploadTemplateDataTemplateTypeEnum = {
    Pdf: 'pdf',
    Html: 'html'
} as const;
export type UploadTemplateDataTemplateTypeEnum = typeof UploadTemplateDataTemplateTypeEnum[keyof typeof UploadTemplateDataTemplateTypeEnum];


/**
 * Check if a given object implements the UploadTemplateData interface.
 */
export function instanceOfUploadTemplateData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function UploadTemplateDataFromJSON(json: any): UploadTemplateData {
    return UploadTemplateDataFromJSONTyped(json, false);
}

export function UploadTemplateDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): UploadTemplateData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowAdditionalProperties': !exists(json, 'allow_additional_properties') ? undefined : json['allow_additional_properties'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'document': !exists(json, 'document') ? undefined : TemplateDocumentFromJSON(json['document']),
        'editableSubmissions': !exists(json, 'editable_submissions') ? undefined : json['editable_submissions'],
        'expirationInterval': !exists(json, 'expiration_interval') ? undefined : json['expiration_interval'],
        'expireAfter': !exists(json, 'expire_after') ? undefined : json['expire_after'],
        'expireSubmissions': !exists(json, 'expire_submissions') ? undefined : json['expire_submissions'],
        'footerHtml': !exists(json, 'footer_html') ? undefined : json['footer_html'],
        'headerHtml': !exists(json, 'header_html') ? undefined : json['header_html'],
        'html': !exists(json, 'html') ? undefined : json['html'],
        'name': json['name'],
        'publicSubmissions': !exists(json, 'public_submissions') ? undefined : json['public_submissions'],
        'publicWebForm': !exists(json, 'public_web_form') ? undefined : json['public_web_form'],
        'redirectUrl': !exists(json, 'redirect_url') ? undefined : json['redirect_url'],
        'scss': !exists(json, 'scss') ? undefined : json['scss'],
        'slackWebhookUrl': !exists(json, 'slack_webhook_url') ? undefined : json['slack_webhook_url'],
        'templateType': !exists(json, 'template_type') ? undefined : json['template_type'],
        'webhookUrl': !exists(json, 'webhook_url') ? undefined : json['webhook_url'],
    };
}

export function UploadTemplateDataToJSON(value?: UploadTemplateData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allow_additional_properties': value.allowAdditionalProperties,
        'description': value.description,
        'document': TemplateDocumentToJSON(value.document),
        'editable_submissions': value.editableSubmissions,
        'expiration_interval': value.expirationInterval,
        'expire_after': value.expireAfter,
        'expire_submissions': value.expireSubmissions,
        'footer_html': value.footerHtml,
        'header_html': value.headerHtml,
        'html': value.html,
        'name': value.name,
        'public_submissions': value.publicSubmissions,
        'public_web_form': value.publicWebForm,
        'redirect_url': value.redirectUrl,
        'scss': value.scss,
        'slack_webhook_url': value.slackWebhookUrl,
        'template_type': value.templateType,
        'webhook_url': value.webhookUrl,
    };
}

